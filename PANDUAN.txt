mkdir nodejs-login-register // membuat project baru dengan nama nodejs-login-register
cd nodejs-login-register // masuk ke folder projectnya
npm init -y // inisialisasi project
mkdir model middleware config // membuat folder model, middleware, dan config 
touch config/database.js middleware/auth.js model/user.js // membuat file database.js, auth.js dan user.js sesuaikan dengan lokasinya
touch app.js index.js // membuat file app.js dan index.js di root project
npm install  cors mongoose express jsonwebtoken dotenv bcryptjs
npm install nodemon -D

# buat file .env di root
touch .env

# isi file .env dengan kode berikut:
API_PORT=4001
MONGO_URI= // Your database URI

# edit file package.json pada bagian scripts, sehingga menjadi sbb:
"scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  }

# tulis kode berikut di file config/database.js:
const mongoose = require("mongoose");

const { MONGO_URI } = process.env;

exports.connect = () => {
  // Connecting to the database
  mongoose
    .connect(MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useCreateIndex: true,
      useFindAndModify: false,
    })
    .then(() => {
      console.log("Successfully connected to database");
    })
    .catch((error) => {
      console.log("database connection failed. exiting now...");
      console.error(error);
      process.exit(1);
    });
};

# tulis kode berikut pada file app.js:
require("dotenv").config();
require("./config/database").connect();
const express = require("express");

const app = express();

app.use(express.json());

// Logic goes here

module.exports = app;

# tulis kode berikut pada file index.js:
const http = require("http");
const app = require("./app");
const server = http.createServer(app);

const { API_PORT } = process.env;
const port = process.env.PORT || API_PORT;

// server listening 
server.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

# tuliskan kode berikut pada file model\user.js:
const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
  first_name: { type: String, default: null },
  last_name: { type: String, default: null },
  email: { type: String, unique: true },
  password: { type: String },
  token: { type: String },
});

module.exports = mongoose.model("user", userSchema);

# tambahkan kode berikut pada app.js:
app.post("/register", async (req, res) => {

  // Our register logic starts here
   try {
    // Get user input
    const { firstName, lastName, email, password } = req.body;

    // Validate user input
    if (!(email && password && firstName && lastName)) {
      res.status(400).send("All input is required");
    }

    // check if user already exist
    // Validate if user exist in our database
    const oldUser = await User.findOne({ email });

    if (oldUser) {
      return res.status(409).send("User Already Exist. Please Login");
    }

    //Encrypt user password
    encryptedUserPassword = await bcrypt.hash(password, 10);

    // Create user in our database
    const user = await User.create({
      first_name: firstName,
      last_name: lastName,
      email: email.toLowerCase(), // sanitize
      password: encryptedUserPassword,
    });

    // Create token
    const token = jwt.sign(
      { user_id: user._id, email },
      process.env.TOKEN_KEY,
      {
        expiresIn: "5h",
      }
    );
    // save user token
    user.token = token;

    // return new user
    res.status(201).json(user);
  } catch (err) {
    console.log(err);
  }
  // Our register logic ends here
}); 

# sehingga kode app.js menjadi sbb:
require("dotenv").config();
require("./config/database").connect();
const express = require("express");

const app = express();

// importing user context
const User = require("./model/user");

// Register
app.post("/register", async (req, res) => {

    // Our register logic starts here
     try {
      // Get user input
      const { firstName, lastName, email, password } = req.body;
  
      // Validate user input
      if (!(email && password && firstName && lastName)) {
        res.status(400).send("All input is required");
      }
  
      // check if user already exist
      // Validate if user exist in our database
      const oldUser = await User.findOne({ email });
  
      if (oldUser) {
        return res.status(409).send("User Already Exist. Please Login");
      }
  
      //Encrypt user password
      encryptedUserPassword = await bcrypt.hash(password, 10);
  
      // Create user in our database
      const user = await User.create({
        first_name: firstName,
        last_name: lastName,
        email: email.toLowerCase(), // sanitize
        password: encryptedUserPassword,
      });
  
      // Create token
      const token = jwt.sign(
        { user_id: user._id, email },
        process.env.TOKEN_KEY,
        {
          expiresIn: "5h",
        }
      );
      // save user token
      user.token = token;
  
      // return new user
      res.status(201).json(user);
    } catch (err) {
      console.log(err);
    }
    // Our register logic ends here
  });

// Login
app.post("/login", async (req, res) => {

    // Our login logic starts here
     try {
      // Get user input
      const { email, password } = req.body;
  
      // Validate user input
      if (!(email && password)) {
        res.status(400).send("All input is required");
      }
      // Validate if user exist in our database
      const user = await User.findOne({ email });
  
      if (user && (await bcrypt.compare(password, user.password))) {
        // Create token
        const token = jwt.sign(
          { user_id: user._id, email },
          process.env.TOKEN_KEY,
          {
            expiresIn: "5h",
          }
        );
  
        // save user token
        user.token = token;
  
        // user
        return res.status(200).json(user);
      }
      return res.status(400).send("Invalid Credentials");
    } catch (err) {
        console.log(err);
      }
    // Our login logic ends here
});

module.exports = app;

# tambahkan TOKEN_KEY pada file .env, sehingga menjadi:
API_PORT=4001
MONGO_URI="mongodb://localhost:27017/db_user"
TOKEN_KEY="bebas"

# untuk melakukan authentikasi, buat file middleware/auth.js, berikut kodenya:
const jwt = require("jsonwebtoken");

const config = process.env;

const verifyToken = (req, res, next) => {
  const token =
    req.body.token || req.query.token || req.headers["x-access-token"];

  if (!token) {
    return res.status(403).send("A token is required for authentication");
  }
  try {
    const decoded = jwt.verify(token, config.TOKEN_KEY);
    req.user = decoded;
  } catch (err) {
    return res.status(401).send("Invalid Token");
  }
  return next();
};

module.exports = verifyToken;

# untuk mencoba middleware buat route /dashboard di file app.js, tambahkan kode berikut:
const auth = require("./middleware/auth");

app.get("/dashboard", auth, (req, res) => {
  res.status(200).send("Welcome to Dashboard");
});

# jika tidak memasukkan token maka hasilnya di postman:
A token is required for authentication

# agar dapat mengakses halaman /dashboard, maka di bagian Headers, isikan key dan valuenya:
x-access-token : PASTE TOKENNYA DISINI

# untuk memberikan pesan 404, gunakan kode berikut di app.js:
// This should be the last route else any after it won't work
app.use("*", (req, res) => {
  res.status(404).json({
    success: "false",
    message: "Page not found",
    error: {
      statusCode: 404,
      message: "You reached a route that is not defined on this server",
    },
  });
});

# CORS
Apa itu CORS (Cross-Origin Resource Sharing) Dan Bagaimana Menggunakannya ? - CORS (Cross-Origin Resource Sharing) adalah protokol yang dibangun di atas HTTP untuk memungkinkan Javascript pada halaman yang berasal dari satu situs untuk mengakses metode di situs lain.

CORS merupakan protokol penghubung antara browser dan web-service yang memberitahu browser bahwa itu adalah "OK" untuk mengeksekusi kode Javascript dari panggilan lintas domain.

Jadi intinya anda bisa transfer data antara domain. Metode ini mirip seperti API (application Programming Interface), anda bisa menggunakan json sebagai service-nya. Tentunya antara keduanya berdeda (api ataupun cors).
Jika kita menggunakan API biasanya anda harus mendapatkan sebuah token agar anda bisa menggunakan API tersebut, token itu berfungnsi sebagai kunci akses yang di berikan untuk mengakses sebuah API.
*) maaf kalau penjelasanku ini salah hehe ,silahkan ralat via komentar :)
Tetapi jika menggunakan CORS anda hanya cukup mengatur Access-Control-Allow-Origin yang biasanya di letakan di bagian header.
*) maaf kalau penjelasanku ini salah hehe ,silahkan ralat via komentar :)

Pada pembahasan kali ini saya ingin coba berbagi tentang bagaimana cara mengatur sebuah cors.

Mengatur CORS agar semua bisa mengaksesnya

Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, POST

Mengatur CORS agar hanya beberapa yang dapat mengaksesnya

Access-Control-Allow-Origin: http://nama_domain.com
Access-Control-Allow-Methods: GET, POST

Letakan kode di atas di bagian header file kodingan anda :)

Contoh :

header("Access-Control-Allow-Origin: *"); 
header('Access-Control-Allow-Methods: GET, POST');

Keterangan :
Jika pada allow-origin anda mengisinya dengan tanda bintang (*), berarti itu artinya anda mengijinkan semua orang mengakses data anda. Sebaliknya, jika anda mengisi-nya dengan nama domain (misal : aku.com) itu artinya hanya aku.com yang di perbolehkan mengakses data anda.
Lalu pada allow-methods, berfungsi untuk memberikan hak akses method yang dapat di gunakan. POST adalah method yang digunakan untuk mengirim data, dan GET adalah method yang digunakan untuk mengambil data.

Mungkin cukup sekian untuk pembahasan kali ini, mohon maaf jika ada salah didalam teori yang di sampaikan. Harap di ma'lum, karena saya juga masih belajar sama seperti anda hehe :)

# CARA MENGGUNAKAN CORS
1. Enable All CORS Requests

const cors = require("cors") //Newly added
const app = express();

app.use(cors()) // Newly added


app.use(express.json({ limit: "50mb" }));

2. Enable CORS for a single route
app.get('/welcome', cors(), auth, (req, res) => {
  res.status(200).send("Welcome to FreeCodeCamp");
});

3. Cara konfigurasi CORS
We can set options in the CORS package by adding parameters to configure it, as shown below:

const corsOptions = {
  origin: 'http://example.com',
  optionsSuccessStatus: 200 // for some legacy browsers
}

app.get('/welcome', cors(corsOptions), auth, (req, res) => {
  res.status(200).send("Welcome to FreeCodeCamp");
});